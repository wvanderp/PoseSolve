import * as Comlink from 'comlink';
import type { SolveRequest, SolveResponse } from '../types/solver';

// Lazy-init WASM module from wasm-pack output if present
let wasm: any | null = null;
let wasmInitError: Error | null = null;

async function ensureWasm() {
  if (wasm || wasmInitError) return { wasm, wasmInitError };
  try {
    // The JS glue is generated by wasm-pack into crates/solver/pkg
    // Vite will serve it as a static module in dev when the pkg exists.
    // Using dynamic import to avoid bundling before it's built.
    // @ts-ignore
    const mod = await import("/crates/solver/pkg/solver.js");
    await mod.default(); // init fetches the .wasm
    wasm = mod;
  } catch (err: any) {
    wasmInitError = err instanceof Error ? err : new Error(String(err));
  }
  return { wasm, wasmInitError };
}

const api = {
  async solve(req: SolveRequest): Promise<SolveResponse> {
    const { wasm, wasmInitError } = await ensureWasm();
    if (wasm && typeof wasm.solve === 'function') {
      const json = JSON.stringify(req);
      const out = wasm.solve(json);
      const res = JSON.parse(out) as SolveResponse;
      return res;
    }
    // Fallback stub until WASM is built
    return {
      pose: { lat: 0, lon: 0, alt: 0, yawDeg: 0, pitchDeg: 0, rollDeg: 0 },
      intrinsics: { focalPx: 1000, cx: req.image.width/2, cy: req.image.height/2 },
      covariance: { matrix: [], labels: [] },
      diagnostics: {
        rmsePx: 0,
        inlierRatio: 0,
        residualsPx: [],
        inlierIds: [],
        warnings: wasmInitError ? [
          'WASM not initialized: ' + wasmInitError.message,
          'Using stub solver. Run "npm run build:wasm" to enable the real solver.'
        ] : ['Using stub solver. Run "npm run build:wasm" to enable the real solver.']
      }
    };
  },
  async reproject_points(_req: unknown): Promise<unknown> {
    const { wasm, wasmInitError } = await ensureWasm();
    if (wasm && typeof wasm.reproject_points === 'function') {
      const json = JSON.stringify(_req);
      const out = wasm.reproject_points(json);
      return JSON.parse(out);
    }
    return { pixels: [], warnings: [
      wasmInitError ? 'WASM not initialized: ' + wasmInitError.message : 'WASM not built',
    ]};
  }
};

Comlink.expose(api);
